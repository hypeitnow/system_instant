#------------------------------------------------------------------------------
# Environment Settings
#------------------------------------------------------------------------------
export EDITOR='nano'

#------------------------------------------------------------------------------
# File Extraction Function
#------------------------------------------------------------------------------
ex () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1   ;;
            *.tar.gz)    tar xzf $1   ;;
            *.tar.xz)    tar xJf $1   ;;
            *.bz2)       bunzip2 $1   ;;
            *.rar)       unrar x $1   ;;
            *.gz)        gunzip $1    ;;
            *.tar)       tar xf $1    ;;
            *.tbz2)      tar xjf $1   ;;
            *.tgz)       tar xzf $1   ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1 ;;
            *.7z)        7z x $1      ;;
            *)          echo "'$1' cannot be extracted via ex()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

export EDITOR='nano' 

netrestart() { sudo systemctl restart systemd-networkd.service && C=$(nmcli c show --active | awk 'FNR == 2 {print $1}') && nmcli down $C && nmcli c up $C }

alias pacman-update='sudo pacman-mirrors --geoip'
alias update-grub='sudo grub-mkconfig -o /boot/grub/grub.cfg'
alias sysupdate='sudo pacman -Sy archlinux-keyring --noconfirm && yay'

#------------------------------------------------------------------------------
# File Operations
#------------------------------------------------------------------------------
# Basic ls aliases
alias ls='ls --color=auto'
alias l='ls -lFh'        # size,show type,human readable
alias la='ls -lAFh'      # long list,show almost all,show type,human readable
alias lr='ls -tRFh'      # sorted by date,recursive,show type,human readable
alias lt='ls -ltFh'      # long list,sorted by date,show type,human readable
alias ll='ls -l'         # long list
alias ldot='ls -ld .*'
alias lS='ls -1FSsh'
alias lart='ls -1Fcart'
alias lrt='ls -1Fcrt'

alias zshrc='${=EDITOR} ~/.zshrc' # Quick access to the ~/.zshrc file

alias grep='grep --color'
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '

alias t='tail -f'

# Command line head / tail shortcuts
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g L="| less"
alias -g M="| most"
alias -g LL="2>&1 | less"
alias -g CA="2>&1 | cat -A"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"
alias -g P="2>&1| pygmentize -l pytb"

alias dud='du -d 1 -h'
alias duf='du -sh *'
alias fd='find . -type d -name'
alias ff='find . -type f -name'

alias h='history'
alias hgrep="fc -El 0 | grep"
alias help='man'
alias p='ps -f'
alias sortnr='sort -n -r'
alias unexport='unset'

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias vim='vim'
alias vi='vim'
alias c='code-insiders'
alias python='python3'
alias pip='pip3'

#------------------------------------------------------------------------------
# Git Commands
#------------------------------------------------------------------------------
# Basic git aliases
alias g='git'
alias gst='git status'
alias gl='git pull'
alias gp='git push'
alias gc='git commit -v'
alias gca='git commit -v -a'
alias gco='git checkout'
alias gcm='git checkout master'
alias gb='git branch'
alias gba='git branch -a'
alias ga='git add'
alias gm='git merge'

# Git helper functions
gitpush() {
    git add .
    git commit -m "$*"
    git pull
    git push
}

gitupdate() {
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_rsa
}

git_prune_local() {
    local prune=$(git fetch -p ; git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d 2>&1)
    if [[ $prune =~ "not fully merged" ]]; then 
    echo -e "\nThere are some commits that need your attention, problably you should run:\n
    git log --graph --left-right --cherry-pick --oneline branch1...branch2 
    "  
    while true; do
        read  "yn?Do you want to proceed and force delete?(y\n)" 
        case $yn in
            [Yy]* ) git fetch -p ; git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -D; break;;
            [Nn]* ) break;;
            * ) echo "Please answer yes or no.";;
        esac
    done
    fi    
}

# Git branch functions
function current_branch() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo ${ref#refs/heads/}
}

function current_repository() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo $(git remote -v | cut -d':' -f 2)
}

#------------------------------------------------------------------------------
# Custom Tools and Utilities
#------------------------------------------------------------------------------
alias obssync='rclone bisync gdrive:WORK/ /home/hypeit/Documents/obsidian/ --verbose --resync'
alias sshp='sshpass -e ssh '
alias wtor='webtorrent download -u 100 '
alias lbrynet='/opt/LBRY/resources/static/daemon/lbrynet'
alias adbmount='adbfs -o kernel_cache -o rescan -o umask=0010 -o big_writes ~/droid'

# Instagram shortcode extractor
function extract_shortcode() {
    if [ "$#" -ne 1 ]; then
        echo "Error: Invalid number of arguments. Please provide exactly one argument."
        return 1
    fi

    local url="$1"
    if [[ "$url" != *"instagram.com/p"* ]] && [[ "$url" != *"instagram.com/r"* ]]; then
        echo "Error: Invalid URL. The URL must contain 'instagram.com/p' or 'instagram.com/r'."
        return 1
    fi

    local shortcode
    shortcode=$(echo "$url" | grep -oP '(?<=/p/|/r/)[^/?]*')
    echo "Shortcode: ${shortcode}"

    if ! command -v instaloader &> /dev/null; then
        echo "Error: Instaloader is not installed. Please install it using 'pip install instaloader'."
        return 1
    fi

    instaloader -- -${shortcode}
}

alias parurebuild='paru -Sy --rebuild --redownload --removemake --skipreview --noconfirm'